package A1;

import java.util.Scanner;

public class BalancedParentheses {
    private static final int MAX_SIZE = 100;
    private static char[] stack = new char[MAX_SIZE];
    private static int top = -1;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the string to check for balanced parentheses: ");
        String input = scanner.nextLine();

        if (!isValidInput(input)) {
            System.out.println("Incorrect input");
        } else if (input.isEmpty() || input.length() == 1) {
            System.out.println("Incorrect input");
        } else if (checkBalancedParentheses(input)) {
            System.out.println("Correct input");
        } else {
            System.out.println("Incorrect input");
        }
        scanner.close();
    }

    public static boolean checkBalancedParentheses(String input) {
        for (int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);
            if (ch == '(') {
                push(ch);
            } else if (ch == ')') {
                if (isEmpty() || pop() != '(') {
                    return false;
                }
            } else {
                // Invalid character other than parentheses
                return false;
            }
        }
        return isEmpty();
    }

    public static boolean isValidInput(String input) {
        for (int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);
            if (ch != '(' && ch != ')') {
                return false; // Invalid character other than parentheses
            }
        }
        return true;
    }

    public static void push(char c) {
        if (top == MAX_SIZE - 1) {
            System.out.println("Stack Overflow");
            return;
        }
        stack[++top] = c;
    }

    public static char pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow");
            return '\0';
        }
        return stack[top--];
    }

    public static boolean isEmpty() {
        return top == -1;
    }
}
